{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-30T22:54:12.003Z",
    "end": "2022-06-30T22:54:40.206Z",
    "duration": 28203,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5fb5013c-2273-4993-b9ad-0c9b57cac464",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7972e301-a26a-4dd6-8f8d-f13b558c28bf",
          "title": "ePismonosa - Login",
          "fullFile": "C:\\Users\\Runner\\Desktop\\QA Inception\\JS-Selenium Automation test\\QA - JS+Selenium+Mocha\\test\\ePismonosaTests.js",
          "file": "\\test\\ePismonosaTests.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ePismonosa - Login\"",
              "fullTitle": "ePismonosa - Login \"before each\" hook in \"ePismonosa - Login\"",
              "timedOut": null,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "ltCapabilities.capabilities.name = this.currentTest.title;\ndriver = new Builder().usingServer(gridUrl).withCapabilities(ltCapabilities.capabilities).build();",
              "err": {},
              "uuid": "9d487f8c-5d4d-48a4-ae6d-cab7fc6f40ef",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"ePismonosa - Login\"",
              "fullTitle": "ePismonosa - Login \"after each\" hook in \"ePismonosa - Login\"",
              "timedOut": null,
              "duration": 188,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "2d536085-acc3-446b-83d1-6de3c74d8fd9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Login with invalid credentials",
              "fullTitle": "ePismonosa - Login Login with invalid credentials",
              "timedOut": null,
              "duration": 7502,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 1) navigate to web cite\nawait driver.get(link);\n// 2) Click on filed \" login with name and password\"\nawait driver.wait(until.elementLocated(By.className('MuiGrid-item')));\nlet listInputs = await driver.findElements(By.css('input'));\nawait listInputs[0].click();\n// 3) Enter name as \"Petar\"\nconst registerForm = await driver.findElement(By.className('register-form'));\nawait driver.wait(until.elementLocated(By.className('register-form')));\nconst inputsList = await registerForm.findElements(By.className('MuiInputBase-input'));\nawait inputsList[0].sendKeys('Petar');\n// 4) Enter username as \"Petar123\"\nawait inputsList[1].sendKeys('Petar123');\n// 5) Click on Login button\nawait registerForm.findElement(By.css('button')).click();\n// 6) Assert that there is alert messagge with text \"Pogresni kredencijali\"\nconst message = driver.findElement(By.className('MuiAlert-message'));\nawait driver.wait(until.elementTextContains(message, ''), 3000);\nconst textMessage = await driver.findElement(By.className('MuiAlert-message')).getText();\nassert.equal(textMessage, 'Pogrešni kredencijali', 'There is no error message with text: \"Pogrešni kredencijali\".');",
              "err": {},
              "uuid": "6132dac8-9daa-421a-b78f-5771c06995f2",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6132dac8-9daa-421a-b78f-5771c06995f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7502,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5f6a758f-4e45-48bd-833e-df8e103a2896",
          "title": "Trefsport - outlet",
          "fullFile": "C:\\Users\\Runner\\Desktop\\QA Inception\\JS-Selenium Automation test\\QA - JS+Selenium+Mocha\\test\\trefSportOutletTests.js",
          "file": "\\test\\trefSportOutletTests.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Trefsport - outlet\"",
              "fullTitle": "Trefsport - outlet \"before each\" hook in \"Trefsport - outlet\"",
              "timedOut": null,
              "duration": 6937,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "ltCapabilities.capabilities.name = this.currentTest.title;\ndriver = new Builder().usingServer(gridUrl).withCapabilities(ltCapabilities.capabilities).build();\nawait driver.get(link);\n// 2) Click and accept cookie\nawait driver.wait(until.elementLocated(By.id('HyperLink4')), 20000);\nawait driver.findElement(By.id('HyperLink4')).click();\n// 3) Click on \"outlet\"\nlet listNavbarOptions = await driver.findElement(By.className('header__menu-list')).findElements(By.className('header__menu-list-item'));\nlet outletField = listNavbarOptions[7];\nawait outletField.click();",
              "err": {},
              "uuid": "a66a9cf7-b5e2-4b11-87fc-462baa89ae40",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Trefsport - outlet\"",
              "fullTitle": "Trefsport - outlet \"after each\" hook in \"Trefsport - outlet\"",
              "timedOut": null,
              "duration": 252,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "d4d9a5ef-4913-477d-bd1a-9af9fe3fe87c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Check that old price is higher than new one",
              "fullTitle": "Trefsport - outlet Check that old price is higher than new one",
              "timedOut": null,
              "duration": 1552,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 4) Click on the random item\nawait driver.wait(until.elementLocated(By.id('product-list')), 20000);\nconst listItems = await driver.findElement(By.id('product-list')).findElements(By.className('product-item'));\nconst rndNo = Math.floor(Math.random() * listItems.length);\nawait listItems[rndNo].click();\n// 5) Take old price\nconst oldPriceString = await driver.findElement(By.className('product__old-price')).getText();\nconst oldPriceNumber = getPriceAsNumber(oldPriceString);\n// 6) Take new price\nconst newPriceString = await driver.findElement(By.className('product__price')).getText();\nconst newPriceNumber = getPriceAsNumber(newPriceString);\n// 7) Assert that new price is lower than old\nassert(oldPriceNumber > newPriceNumber, 'Old price is not higher than new - 2!');",
              "err": {},
              "uuid": "4d5e97f0-abc1-490f-846b-24292fe08dff",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sorting by lower prices",
              "fullTitle": "Trefsport - outlet Sorting by lower prices",
              "timedOut": null,
              "duration": 10901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let arrayNewPrices = [];\n// 4) Click on a sort button\nawait driver.wait(until.elementLocated(By.className('chosen-container-single-nosearch')));\nawait driver.findElement(By.id('ddlOrderBy_chosen')).click();\n//5) Click on option \"Najmanjoj ceni\"\nconst listOpts = await driver.findElement(By.id('ddlOrderBy_chosen')).findElements(By.className('active-result'));\nconst lowerPriceOpt = await listOpts[3];\nawait lowerPriceOpt.click();\n// 6) Take all new prices\nawait new Promise(r => setTimeout(r, 2000));\nconst listItems = await driver.findElement(By.id('product-list')).findElements(By.className('old-price'));\n// 7) Add to list all prices\nfor (let i = 0; i < listItems.length; i++) {\n    let curPrice = await listItems[i].getText();\n    let curPriceNumber = getPriceAsNumber(curPrice);\n    arrayNewPrices.push(curPriceNumber);\n}\n// 8) Assert that current price is lower than the next one\nfor (let i = 0; i < arrayNewPrices.length - 1; i++) {\n    assert(arrayNewPrices[i] <= arrayNewPrices[i + 1], `Sorting doesn't work correct. Price of ${i + 1} item is higher than the next one.`);\n}",
              "err": {},
              "uuid": "0b6cdb39-eace-46ef-a31c-0bbf60f84fc1",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d5e97f0-abc1-490f-846b-24292fe08dff",
            "0b6cdb39-eace-46ef-a31c-0bbf60f84fc1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12453,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}